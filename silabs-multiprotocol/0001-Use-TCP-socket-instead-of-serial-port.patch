From 9182cbd5af7976e489e1f5c84d2c2d5767b9335b Mon Sep 17 00:00:00 2001
Message-Id: <9182cbd5af7976e489e1f5c84d2c2d5767b9335b.1667435840.git.stefan@agner.ch>
From: Stefan Agner <stefan@agner.ch>
Date: Sat, 20 Aug 2022 10:10:08 +0200
Subject: [PATCH] Use TCP socket instead of serial port

Instead of opening a serial port, open a TCP socket on port 9999. Pass
the listening socket to the new instance in case a controller reset is
being requested. This makes sure the TCP connection stays up even when
zigbeed restarts.
---
 app.c                                         |  61 ++++++-
 .../zigbee/app/zigbeed/serial_adapter.c       | 169 ++++++++++--------
 main.c                                        |   3 +
 3 files changed, 155 insertions(+), 78 deletions(-)

diff --git a/app.c b/app.c
index ed681c0..213cf1a 100644
--- a/app.c
+++ b/app.c
@@ -27,6 +27,7 @@
  */
 
 #define _GNU_SOURCE
+#include <arpa/inet.h>
 #include <stdint.h>
 #include <stdbool.h>
 
@@ -81,6 +82,9 @@ extern jmp_buf gResetJump;
 #define RADIO_URL_MAX_LEN 150
 char radioUrl[RADIO_URL_MAX_LEN];
 
+extern struct in6_addr ezspListenAddress;
+extern uint16_t ezspPort;
+
 /**
  * This enumeration defines the argument return values.
  *
@@ -88,16 +92,18 @@ char radioUrl[RADIO_URL_MAX_LEN];
 enum {
   OT_POSIX_OPT_RADIO_URL      = 'r',
   OT_POSIX_OPT_DEBUG_LEVEL    = 'd',
-  OT_POSIX_OPT_EZSP_INTERFACE = 'p',
+  OT_POSIX_OPT_EZSP_LISTEN    = 'l',
+  OT_POSIX_OPT_EZSP_LISTEN_PORT = 'p',
   OT_POSIX_OPT_HELP           = 'h',
   OT_POSIX_OPT_VERBOSE        = 'v',
 };
 
-#define GETOPT_OPTION_STRING "r:d:p:hv"
+#define GETOPT_OPTION_STRING "r:d:l:p:hv"
 static const struct option kOptions[] = {
   { "radio-url", required_argument, NULL, OT_POSIX_OPT_RADIO_URL },
   { "debug-level", required_argument, NULL, OT_POSIX_OPT_DEBUG_LEVEL },
-  { "ezsp-interface", required_argument, NULL, OT_POSIX_OPT_EZSP_INTERFACE },
+  { "ezsp-listen", required_argument, NULL, OT_POSIX_OPT_EZSP_LISTEN },
+  { "ezsp-listen-port", required_argument, NULL, OT_POSIX_OPT_EZSP_LISTEN_PORT },
   { "help", no_argument, NULL, OT_POSIX_OPT_HELP },
   { "verbose", no_argument, NULL, OT_POSIX_OPT_VERBOSE },
   { 0, 0, 0, 0 }
@@ -111,7 +117,8 @@ static void PrintUsage(const char *aProgramName, FILE *aStream, int aExitCode)
           "Options:\n"
           "    -r  --radio-url <RadioURL>    URL to the radio device. Must include iid=n with n=1,2, or 3.\n"
           "    -d  --debug-level <level>     Debug level for Spinel syslog logging.\n"
-          "    -p  --ezsp-interface <name>   EZSP interface name.\n"
+          "    -l  --ezsp-listen <address>   Address to listen on (EZSP protocol).\n"
+          "    -p  --ezsp-listen-port <port> Port to listen on (EZSP protocol).\n"
           "    -h  --help                    Display this usage information.\n"
           "    -v  --verbose                 Also log Spinel to stderr.\n",
           aProgramName);
@@ -201,6 +208,39 @@ static ssize_t ParseEtcConf(char *confFilePath, int aArgVectorSize, char *aArgVe
   return argCount;
 }
 
+static bool parseListenPort(const char *arg)
+{
+  unsigned long port = strtoul(optarg, NULL, 10);
+  if (!port || port > UINT16_MAX) {
+    return false;
+  }
+  ezspPort = (uint16_t)port;
+  return true;
+}
+
+static bool parseListenAddress(const char *arg)
+{
+  char *tmp;
+  const char *ipv4_prefix = "::FFFF:";
+  const int ipv4_prefix_len = sizeof(ipv4_prefix) - 1;
+  const int arg_len = strlen(arg);
+
+  if (inet_pton(AF_INET6, arg, &ezspListenAddress) == 1) {
+    return true;
+  }
+
+  tmp = malloc(arg_len + ipv4_prefix_len);
+  strcpy(tmp, ipv4_prefix);
+  strncpy(tmp + ipv4_prefix_len, arg, arg_len);
+  if (inet_pton(AF_INET6, tmp, &ezspListenAddress) == 1) {
+    free(tmp);
+    return true;
+  }
+  free(tmp);
+
+  return false;
+}
+
 static void ParseArg(int aArgCount, char *aArgVector[], PosixConfig *aConfig)
 {
   optind = 1;
@@ -222,13 +262,18 @@ static void ParseArg(int aArgCount, char *aArgVector[], PosixConfig *aConfig)
       case OT_POSIX_OPT_HELP:
         PrintUsage(aArgVector[0], stdout, OT_EXIT_SUCCESS);
         break;
-      case OT_POSIX_OPT_EZSP_INTERFACE:
-        if (strlen(optarg) > SERIAL_PORT_NAME_MAX_LEN) {
-          fprintf(stderr, "Error: ezsp-interface name too long\n");
+      case OT_POSIX_OPT_EZSP_LISTEN:
+	if (!parseListenAddress(optarg)) {
+          fprintf(stderr, "Error: could not parse ezsp-listen address\n");
           exit(OT_EXIT_INVALID_ARGUMENTS);
         }
-        strcpy(serialPort, optarg);
         break;
+      case OT_POSIX_OPT_EZSP_LISTEN_PORT:
+        if (!parseListenPort(optarg)) {
+          fprintf(stderr, "Error: could not parse ezsp-listen port\n");
+          exit(OT_EXIT_INVALID_ARGUMENTS);
+	}
+	break;
       case OT_POSIX_OPT_RADIO_URL:
         if (strlen(optarg) > RADIO_URL_MAX_LEN) {
           fprintf(stderr, "Error: Radio URL too long\n");
diff --git a/gecko_sdk_4.1.3/protocol/zigbee/app/zigbeed/serial_adapter.c b/gecko_sdk_4.1.3/protocol/zigbee/app/zigbeed/serial_adapter.c
index f486305..2807ab9 100644
--- a/gecko_sdk_4.1.3/protocol/zigbee/app/zigbeed/serial_adapter.c
+++ b/gecko_sdk_4.1.3/protocol/zigbee/app/zigbeed/serial_adapter.c
@@ -17,13 +17,16 @@
  *
  ******************************************************************************/
 
-#include <stdint.h>
-#include <stdbool.h>
 #include <errno.h>
 #include <fcntl.h>
+#include <netinet/in.h>
+#include <stdint.h>
+#include <stdbool.h>
 #include <stdio.h>
+#include <stdlib.h>
 #include <string.h>
-#include <termios.h>
+#include <sys/socket.h>
+#include <netinet/tcp.h>
 #include <unistd.h>
 
 #include "ember-types.h"
@@ -37,19 +40,17 @@
 #define MAX_OUT_BLOCK_LEN     512   // maximum bytes to output at one time
 #define MAX_IN_BLOCK_LEN      512   // maximum bytes to input at one time
 
-#define DEFAULT_SERIAL_PORT "/tmp/ttyZigbeed"
 #define DEFAULT_OUT_BLOCK_LEN 1
 #define DEFAULT_IN_BLOCK_LEN 256
 
-char serialPort[SERIAL_PORT_NAME_MAX_LEN] = DEFAULT_SERIAL_PORT;
 
-#ifdef ZIGBEE_PRO_COMPLIANCE_ON_HOST
-#include "sl_cli_threaded_host.h"
-extern bool sli_cli_is_input_handled(void);
-extern int sli_cli_get_pipe_read_fd(void);
-#endif // ZIGBEE_PRO_COMPLIANCE_ON_HOST
+struct in6_addr ezspListenAddress = IN6ADDR_ANY_INIT;
+uint16_t ezspPort = 9999;
+
+extern jmp_buf gResetJump;
+
+static int socketFd = NULL_FILE_DESCRIPTOR;
 
-static int serialFd = NULL_FILE_DESCRIPTOR;   // file descriptor for serial port
 static uint8_t outBuffer[MAX_OUT_BLOCK_LEN];  // array to buffer output
 static uint8_t *outBufRd;                     // outBuffer read pointer
 static uint8_t *outBufWr;                     // outBuffer write pointer
@@ -59,13 +60,59 @@ static uint8_t *inBufRd;                      // inBuffer read pointer
 static uint8_t *inBufWr;                      // inBuffer write pointer
 static uint16_t inBlockLen;                   // bytes to read ahead
 
-static void serialClose(void)
+static EmberStatus initSocket(void)
 {
-  if (serialFd != NULL_FILE_DESCRIPTOR) {
-    tcflush(serialFd, TCIOFLUSH);
-    close(serialFd);
-    serialFd = NULL_FILE_DESCRIPTOR;
+  struct sockaddr_in6 address;
+  int addrlen = sizeof(address);
+  int opt = 1;
+  static int serverFd = -1;
+
+  if ((serverFd = socket(AF_INET6, SOCK_STREAM, 0)) < 0) {
+    fprintf(stderr, "Failed to create server socket: %s\r\n", strerror(errno));
+    return EMBER_ERR_FATAL;
+  }
+
+  // Forcefully attaching socket to the port 8080
+  if (setsockopt(serverFd, SOL_SOCKET,
+                 SO_REUSEADDR, &opt,
+                 sizeof(opt))) {
+    fprintf(stderr, "Failed to set server socket options: %s\r\n", strerror(errno));
+    return EMBER_ERR_FATAL;
   }
+
+  address.sin6_family = AF_INET6;
+  address.sin6_addr = ezspListenAddress;
+  address.sin6_port = htons(ezspPort);
+
+  if (bind(serverFd, (struct sockaddr*)&address, sizeof(address)) < 0) {
+    fprintf(stderr, "Failed to bind server socket to port %d: %s\r\n", ezspPort, strerror(errno));
+    return EMBER_ERR_FATAL;
+  }
+
+  fprintf(stderr, "Listening on port %d for connection...\r\n", ezspPort);
+  if (listen(serverFd, 3) < 0) {
+    fprintf(stderr, "Failed to listen on server socket: %s\r\n", strerror(errno));
+    return EMBER_ERR_FATAL;
+  }
+
+  fprintf(stderr, "Accepting connection.\r\n");
+  if ((socketFd = accept(serverFd, (struct sockaddr*)&address, (socklen_t*)&addrlen)) < 0) {
+    fprintf(stderr, "Failed to accept on server socket: %s\r\n", strerror(errno));
+    return EMBER_SERIAL_RX_EMPTY;
+  }
+  fprintf(stderr, "Accepted connection %d.\r\n", socketFd);
+
+  close(serverFd);
+
+  fcntl(socketFd, F_SETFL, O_NONBLOCK);
+
+  if (setsockopt(socketFd, IPPROTO_TCP,
+                 TCP_NODELAY, &opt,
+                 sizeof(opt))) {
+    fprintf(stderr, "Failed to set server socket options: %s\r\n", strerror(errno));
+  }
+
+  return EMBER_SUCCESS;
 }
 
 static void writeFlush(void)
@@ -73,11 +120,10 @@ static void writeFlush(void)
   int16_t count;
 
   if (outBufWr - outBufRd) {
-    count = write(serialFd, outBufRd, outBufWr - outBufRd);
+    count = write(socketFd, outBufRd, outBufWr - outBufRd);
     if (count > 0) {
       outBufRd += count;
     }
-    fsync(serialFd);
     if (outBufRd == outBufWr) {
       outBufRd = outBufWr = outBuffer;
     }
@@ -86,13 +132,23 @@ static void writeFlush(void)
 
 static EmberStatus readAvailable(uint16_t *count)
 {
-  int16_t bytesRead;
+  int bytesRead;
+
   if (inBufRd == inBufWr) {
     inBufRd = inBufWr = inBuffer;
-    bytesRead = read(serialFd, inBuffer, inBlockLen);
+    bytesRead = read(socketFd, inBuffer, inBlockLen);
     if (bytesRead > 0) {
       inBufWr += bytesRead;
     }
+    if (bytesRead == 0) {
+      fprintf(stderr, "Socket connection has been closed, restarting...\r\n");
+      close(socketFd);
+      socketFd = -1;
+
+      // ZHA cannot handle short interruptions of the port, so reopen the
+      // port asap
+      initSocket();
+    }
   }
   *count = inBufWr - inBufRd;
   if (inBufRd == inBufWr) {
@@ -113,7 +169,8 @@ EmberStatus emberSerialInit(uint8_t port,
 #ifdef IO_LOG
   logFile = fopen(IO_LOG, "w");
 #endif
-  struct termios tios;
+  const char *env;
+
   outBufRd = outBuffer;
   outBufWr = outBuffer;
   outBlockLen = DEFAULT_OUT_BLOCK_LEN;
@@ -127,38 +184,28 @@ EmberStatus emberSerialInit(uint8_t port,
     inBlockLen = MAX_IN_BLOCK_LEN;
   }
 
-  // Make sure any previous file descriptor is nicely closed.
-  // This should only be necessary during a failure recovery when the
-  // host encountered an error.
-  serialClose();
-
-  serialFd = open(serialPort,
-                  O_RDWR | O_NOCTTY | O_NONBLOCK);
-
-  if (serialFd == NULL_FILE_DESCRIPTOR) {
-    fprintf(stderr, "Failed to open %s: %s\r\n", serialPort, strerror(errno));
-    fprintf(stderr, "Use socat to create PTYs for zigbeed and the host app. Eg:\r\n");
-    fprintf(stderr, "socat -x -v pty,link=/dev/ttyZigbeeNCP pty,link=/tmp/ttyZigbeeNCP\r\n");
-    serialClose();
-    return EMBER_ERR_FATAL;
+  // Get file descriptor from previous instance, if valid.
+  env = getenv("ZIGBEED_SOCKET_FD");
+  if (env && (socketFd = strtol(env, NULL, 10)) > 0) {
+    fprintf(stderr, "Reusing socket from previous instance.\r\n");
+    return EMBER_SUCCESS;
   }
 
-  tcflush(serialFd, TCIOFLUSH);       // flush all input and output data
-  fcntl(serialFd, F_SETFL, O_NDELAY);
-  tcgetattr(serialFd, &tios);         // get current serial port options
-
-  tios.c_iflag &= ~(BRKINT | INLCR | IGNCR | ICRNL | INPCK
-                    | ISTRIP | IMAXBEL | IXON | IXOFF | IXANY);
-
-  tios.c_lflag &= ~(ICANON | ECHO | IEXTEN | ISIG);  // raw input
-
-  tios.c_oflag &= ~OPOST;               // raw output
-
-  (void) memset(tios.c_cc, _POSIX_VDISABLE, NCCS);  // disable all control chars
+  return initSocket();
+}
 
-  tcsetattr(serialFd, TCSAFLUSH, &tios);  // set EZSP serial port options
+void serialShutdown(void)
+{
+  char buf[16];
 
-  return EMBER_SUCCESS;
+  // If we aave a valid socket, leave it open and pass fd number to
+  // the new instance.
+  if (socketFd > 0) {
+    snprintf(buf, sizeof(buf), "%d", socketFd);
+    setenv("ZIGBEED_SOCKET_FD", buf, true);
+  } else {
+    unsetenv("ZIGBEED_SOCKET_FD");
+  }
 }
 
 EmberStatus emberSerialWriteByte(uint8_t port, uint8_t dataByte)
@@ -211,36 +258,18 @@ void sli_serial_adapter_tick_callback(void)
   FD_ZERO(&mainloop.mWriteFdSet);
   FD_ZERO(&mainloop.mErrorFdSet);
 
-#ifdef ZIGBEE_PRO_COMPLIANCE_ON_HOST
-  // pro-compliance on host has CLI interface
-  // need to set pipeReadFd into the mainloop file descriptor.
-  int pipeReadFd = sli_cli_get_pipe_read_fd();
-  FD_SET(pipeReadFd, &mainloop.mReadFdSet);
-  FD_SET(pipeReadFd, &mainloop.mErrorFdSet);
-  serialFd = (serialFd > pipeReadFd ? serialFd : pipeReadFd);
-#endif // ZIGBEE_PRO_COMPLIANCE_ON_HOST
-
   // Update mainloop initial FD and its timeout value
-  mainloop.mMaxFd           = serialFd;
+  mainloop.mMaxFd           = socketFd;
   mainloop.mTimeout.tv_sec  = timeoutMs / 1000;
   mainloop.mTimeout.tv_usec = (timeoutMs - mainloop.mTimeout.tv_sec * 1000) * 1000;
 
   // Update mainloop FDs to monitor
-  FD_SET(serialFd, &mainloop.mReadFdSet);
-  FD_SET(serialFd, &mainloop.mErrorFdSet);
+  FD_SET(socketFd, &mainloop.mReadFdSet);
+  FD_SET(socketFd, &mainloop.mErrorFdSet);
   otSysMainloopUpdate(NULL, &mainloop);
 
   if (otSysMainloopPoll(&mainloop) >= 0) {
     otSysMainloopProcess(NULL, &mainloop);
-#ifdef ZIGBEE_PRO_COMPLIANCE_ON_HOST
-    // If the command is handled by the CLI component, read the data
-    // to empty the pipe so that it is ready for the next command.
-    if (sli_cli_is_input_handled()) {
-      char buff[SL_CLI_THREADED_HOST_PIPE_DATA_LENGTH];
-      assert(SL_CLI_THREADED_HOST_PIPE_DATA_LENGTH
-             == read(sli_cli_get_pipe_read_fd(), buff, SL_CLI_THREADED_HOST_PIPE_DATA_LENGTH));
-    }
-#endif // ZIGBEE_PRO_COMPLIANCE_ON_HOST
   } else if (errno != EINTR) {
     //printf("%d\n", errno);
     assert(false);
diff --git a/main.c b/main.c
index 8ca0924..31a0352 100644
--- a/main.c
+++ b/main.c
@@ -49,6 +49,8 @@ void __gcov_flush();
 // From platform/base/phy/simulation/security.h:
 extern uint8_t simulatorEncryptionType;
 
+extern void serialShutdown(void);
+
 void app_init(void)
 {
 #if defined(EMBER_TEST)
@@ -92,6 +94,7 @@ int main(void)
   app_process_args(argc, argv);
 
   if (setjmp(gResetJump)) {
+    serialShutdown();
     fprintf(stderr, "Restarting\n");
     execvp(argv[0], argv);
   }
-- 
2.38.1

